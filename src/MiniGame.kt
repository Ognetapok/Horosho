import kotlin.random.Random

fun main() {
    var playAgain = true

    while (playAgain) {
        println("=== –ú–ò–ù–ò-–ò–ì–†–ê '–£–ì–ê–î–ê–ô –ß–ò–°–õ–û' ===\n")

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100
        val secretNumber = Random.nextInt(1, 101)
        var attempts = 0
        var guessed = false

        println("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")
        println("–£ —Ç–µ–±—è –µ—Å—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫.\n")

        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        while (attempts < 10 && !guessed) {
            attempts++
            print("–ü–æ–ø—ã—Ç–∫–∞ $attempts/10. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ: ")

            val guess = readLine()?.toIntOrNull()

            if (guess == null) {
                println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n")
                continue
            }

            when {
                guess < secretNumber -> {
                    println("–ú–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï —á–µ–º $guess\n")
                }
                guess > secretNumber -> {
                    println("–ú–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —á–µ–º $guess\n")
                }
                else -> {
                    guessed = true
                    println("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ $secretNumber!")
                    println("–¢–µ–±–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å $attempts –ø–æ–ø—ã—Ç–æ–∫")
                }
            }
        }

        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
        if (!guessed) {
            println("\nüò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏.")
            println("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: $secretNumber")
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
        println("\n" + "=".repeat(40))
        println("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–´")
        println("=".repeat(40))
        println("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: $secretNumber")
        println("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: $attempts")

        when {
            attempts == 1 -> println("–¢—ã –≥–µ–Ω–∏–π! –£–≥–∞–¥–∞–ª —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏!")
            attempts <= 3 -> println("–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
            attempts <= 6 -> println("–•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!")
            attempts <= 9 -> println("–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!")
            else -> println("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        }

        println("=".repeat(40))

        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
        print("\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ")
        val answer = readLine()?.lowercase()

        playAgain = when (answer) {
            "–¥–∞", "yes", "–¥", "y" -> true
            else -> false
        }

        if (playAgain) {
            println("\n" + "=".repeat(40))
        }
    }

    println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
}